
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.2
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.2",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  phone: 'phone',
  name: 'name',
  password: 'password',
  role: 'role',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isActive: 'isActive'
};

exports.Prisma.UserAddressScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  firstName: 'firstName',
  lastName: 'lastName',
  phone: 'phone',
  email: 'email',
  address: 'address',
  isDefault: 'isDefault',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MerchantProfileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  fullName: 'fullName',
  dateOfBirth: 'dateOfBirth',
  contactEmail: 'contactEmail',
  contactPhone: 'contactPhone',
  nidOrPassportNo: 'nidOrPassportNo',
  presentAddress: 'presentAddress',
  permanentAddress: 'permanentAddress',
  portfolioUrl: 'portfolioUrl',
  websiteUrl: 'websiteUrl',
  bankName: 'bankName',
  bankBranch: 'bankBranch',
  accountName: 'accountName',
  accountNumber: 'accountNumber',
  routingNumber: 'routingNumber',
  message: 'message',
  tiar: 'tiar',
  leftTiar: 'leftTiar',
  brandOption: 'brandOption',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BrandScalarFieldEnum = {
  id: 'id',
  name: 'name',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  brandCategoryId: 'brandCategoryId',
  userId: 'userId',
  defaultBrandPct: 'defaultBrandPct',
  defaultMerchantPct: 'defaultMerchantPct',
  dateOfBirth: 'dateOfBirth',
  contactEmail: 'contactEmail',
  contactPhone: 'contactPhone',
  nidOrPassportNo: 'nidOrPassportNo',
  presentAddress: 'presentAddress',
  permanentAddress: 'permanentAddress',
  portfolioUrl: 'portfolioUrl',
  websiteUrl: 'websiteUrl',
  bankName: 'bankName',
  bankBranch: 'bankBranch',
  accountName: 'accountName',
  accountNumber: 'accountNumber',
  routingNumber: 'routingNumber',
  message: 'message',
  industryType: 'industryType',
  socialProfile: 'socialProfile'
};

exports.Prisma.BrandCategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  title: 'title',
  description: 'description',
  price: 'price',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isActive: 'isActive',
  brandName: 'brandName',
  brandId: 'brandId',
  mockupId: 'mockupId',
  userId: 'userId',
  visibility: 'visibility',
  backDesign: 'backDesign',
  frontDesign: 'frontDesign',
  brandCommissionPct: 'brandCommissionPct',
  merchantCommissionPct: 'merchantCommissionPct'
};

exports.Prisma.SaleScalarFieldEnum = {
  id: 'id',
  orderItemId: 'orderItemId',
  productId: 'productId',
  merchantId: 'merchantId',
  brandId: 'brandId',
  quantity: 'quantity',
  total: 'total',
  brandEarning: 'brandEarning',
  merchantEarning: 'merchantEarning',
  platformEarning: 'platformEarning',
  createdAt: 'createdAt'
};

exports.Prisma.SaleItemScalarFieldEnum = {
  id: 'id',
  saleId: 'saleId',
  productId: 'productId',
  quantity: 'quantity',
  unitPrice: 'unitPrice',
  total: 'total',
  orderItemId: 'orderItemId'
};

exports.Prisma.ProductVariantScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  color: 'color',
  fitType: 'fitType',
  frontImg: 'frontImg',
  backImg: 'backImg'
};

exports.Prisma.FeatureScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  content: 'content'
};

exports.Prisma.TagScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  value: 'value'
};

exports.Prisma.MockupScalarFieldEnum = {
  id: 'id',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MockupVariantScalarFieldEnum = {
  id: 'id',
  mockupId: 'mockupId',
  color: 'color',
  fitType: 'fitType',
  frontImg: 'frontImg',
  backImg: 'backImg'
};

exports.Prisma.OrderScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  addressId: 'addressId',
  currency: 'currency',
  subtotal: 'subtotal',
  discount: 'discount',
  tax: 'tax',
  shippingFee: 'shippingFee',
  grandTotal: 'grandTotal',
  couponCode: 'couponCode',
  couponRate: 'couponRate',
  status: 'status',
  tranId: 'tranId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  settledAt: 'settledAt'
};

exports.Prisma.OrderItemScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  productId: 'productId',
  productTitle: 'productTitle',
  unitPrice: 'unitPrice',
  quantity: 'quantity',
  color: 'color',
  fitType: 'fitType',
  size: 'size'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  valId: 'valId',
  bankTranId: 'bankTranId',
  cardType: 'cardType',
  rawPayload: 'rawPayload',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CommissionSettingScalarFieldEnum = {
  id: 'id',
  brandId: 'brandId',
  merchantId: 'merchantId',
  brandCommissionPct: 'brandCommissionPct',
  merchantCommissionPct: 'merchantCommissionPct',
  productId: 'productId',
  effectiveFrom: 'effectiveFrom',
  effectiveTo: 'effectiveTo',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PayoutScalarFieldEnum = {
  id: 'id',
  actor: 'actor',
  brandId: 'brandId',
  merchantId: 'merchantId',
  amount: 'amount',
  note: 'note',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.Role = exports.$Enums.Role = {
  USER: 'USER',
  ADMIN: 'ADMIN',
  BRAND: 'BRAND',
  MERCH: 'MERCH'
};

exports.FitType = exports.$Enums.FitType = {
  MEN: 'MEN',
  WOMEN: 'WOMEN',
  YOUTH: 'YOUTH'
};

exports.PayoutActor = exports.$Enums.PayoutActor = {
  BRAND: 'BRAND',
  MERCHANT: 'MERCHANT'
};

exports.Prisma.ModelName = {
  User: 'User',
  UserAddress: 'UserAddress',
  MerchantProfile: 'MerchantProfile',
  Brand: 'Brand',
  BrandCategory: 'BrandCategory',
  Product: 'Product',
  Sale: 'Sale',
  SaleItem: 'SaleItem',
  ProductVariant: 'ProductVariant',
  Feature: 'Feature',
  Tag: 'Tag',
  Mockup: 'Mockup',
  MockupVariant: 'MockupVariant',
  Order: 'Order',
  OrderItem: 'OrderItem',
  Payment: 'Payment',
  CommissionSetting: 'CommissionSetting',
  Payout: 'Payout'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
