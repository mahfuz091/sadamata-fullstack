
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.2
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.2",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  phone: 'phone',
  name: 'name',
  password: 'password',
  role: 'role',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isActive: 'isActive'
};

exports.Prisma.UserAddressScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  firstName: 'firstName',
  lastName: 'lastName',
  phone: 'phone',
  email: 'email',
  address: 'address',
  isDefault: 'isDefault',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MerchantProfileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  fullName: 'fullName',
  dateOfBirth: 'dateOfBirth',
  contactEmail: 'contactEmail',
  contactPhone: 'contactPhone',
  nidOrPassportNo: 'nidOrPassportNo',
  presentAddress: 'presentAddress',
  permanentAddress: 'permanentAddress',
  portfolioUrl: 'portfolioUrl',
  websiteUrl: 'websiteUrl',
  bankName: 'bankName',
  bankBranch: 'bankBranch',
  accountName: 'accountName',
  accountNumber: 'accountNumber',
  routingNumber: 'routingNumber',
  message: 'message',
  tiar: 'tiar',
  leftTiar: 'leftTiar',
  brandOption: 'brandOption',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BrandScalarFieldEnum = {
  id: 'id',
  name: 'name',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  brandCategoryId: 'brandCategoryId',
  userId: 'userId',
  defaultBrandPct: 'defaultBrandPct',
  defaultMerchantPct: 'defaultMerchantPct',
  dateOfBirth: 'dateOfBirth',
  contactEmail: 'contactEmail',
  contactPhone: 'contactPhone',
  nidOrPassportNo: 'nidOrPassportNo',
  presentAddress: 'presentAddress',
  permanentAddress: 'permanentAddress',
  portfolioUrl: 'portfolioUrl',
  websiteUrl: 'websiteUrl',
  bankName: 'bankName',
  bankBranch: 'bankBranch',
  accountName: 'accountName',
  accountNumber: 'accountNumber',
  routingNumber: 'routingNumber',
  message: 'message',
  industryType: 'industryType',
  socialProfile: 'socialProfile'
};

exports.Prisma.BrandCategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  title: 'title',
  description: 'description',
  price: 'price',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isActive: 'isActive',
  brandName: 'brandName',
  brandId: 'brandId',
  mockupId: 'mockupId',
  userId: 'userId',
  visibility: 'visibility',
  backDesign: 'backDesign',
  frontDesign: 'frontDesign',
  brandCommissionPct: 'brandCommissionPct',
  merchantCommissionPct: 'merchantCommissionPct'
};

exports.Prisma.SaleScalarFieldEnum = {
  id: 'id',
  orderItemId: 'orderItemId',
  productId: 'productId',
  merchantId: 'merchantId',
  brandId: 'brandId',
  quantity: 'quantity',
  total: 'total',
  brandEarning: 'brandEarning',
  merchantEarning: 'merchantEarning',
  platformEarning: 'platformEarning',
  createdAt: 'createdAt'
};

exports.Prisma.SaleItemScalarFieldEnum = {
  id: 'id',
  saleId: 'saleId',
  productId: 'productId',
  quantity: 'quantity',
  unitPrice: 'unitPrice',
  total: 'total',
  orderItemId: 'orderItemId'
};

exports.Prisma.ProductVariantScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  color: 'color',
  fitType: 'fitType',
  frontImg: 'frontImg',
  backImg: 'backImg'
};

exports.Prisma.FeatureScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  content: 'content'
};

exports.Prisma.TagScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  value: 'value'
};

exports.Prisma.MockupScalarFieldEnum = {
  id: 'id',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MockupVariantScalarFieldEnum = {
  id: 'id',
  mockupId: 'mockupId',
  color: 'color',
  fitType: 'fitType',
  frontImg: 'frontImg',
  backImg: 'backImg'
};

exports.Prisma.OrderScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  addressId: 'addressId',
  currency: 'currency',
  subtotal: 'subtotal',
  discount: 'discount',
  tax: 'tax',
  shippingFee: 'shippingFee',
  grandTotal: 'grandTotal',
  couponCode: 'couponCode',
  couponRate: 'couponRate',
  status: 'status',
  tranId: 'tranId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  settledAt: 'settledAt'
};

exports.Prisma.OrderItemScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  productId: 'productId',
  productTitle: 'productTitle',
  unitPrice: 'unitPrice',
  quantity: 'quantity',
  color: 'color',
  fitType: 'fitType',
  size: 'size'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  valId: 'valId',
  bankTranId: 'bankTranId',
  cardType: 'cardType',
  rawPayload: 'rawPayload',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CommissionSettingScalarFieldEnum = {
  id: 'id',
  brandId: 'brandId',
  merchantId: 'merchantId',
  brandCommissionPct: 'brandCommissionPct',
  merchantCommissionPct: 'merchantCommissionPct',
  productId: 'productId',
  effectiveFrom: 'effectiveFrom',
  effectiveTo: 'effectiveTo',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PayoutScalarFieldEnum = {
  id: 'id',
  actor: 'actor',
  brandId: 'brandId',
  merchantId: 'merchantId',
  amount: 'amount',
  note: 'note',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.PayoutActor = exports.$Enums.PayoutActor = {
  BRAND: 'BRAND',
  MERCHANT: 'MERCHANT'
};

exports.FitType = exports.$Enums.FitType = {
  MEN: 'MEN',
  WOMEN: 'WOMEN',
  YOUTH: 'YOUTH'
};

exports.Role = exports.$Enums.Role = {
  USER: 'USER',
  ADMIN: 'ADMIN',
  BRAND: 'BRAND',
  MERCH: 'MERCH'
};

exports.Visibility = exports.$Enums.Visibility = {
  SEARCHABLE: 'SEARCHABLE',
  NON_SEARCHABLE: 'NON_SEARCHABLE'
};

exports.ImageType = exports.$Enums.ImageType = {
  FRONT: 'FRONT',
  BACK: 'BACK'
};

exports.Prisma.ModelName = {
  User: 'User',
  UserAddress: 'UserAddress',
  MerchantProfile: 'MerchantProfile',
  Brand: 'Brand',
  BrandCategory: 'BrandCategory',
  Product: 'Product',
  Sale: 'Sale',
  SaleItem: 'SaleItem',
  ProductVariant: 'ProductVariant',
  Feature: 'Feature',
  Tag: 'Tag',
  Mockup: 'Mockup',
  MockupVariant: 'MockupVariant',
  Order: 'Order',
  OrderItem: 'OrderItem',
  Payment: 'Payment',
  CommissionSetting: 'CommissionSetting',
  Payout: 'Payout'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "C:\\Sadamata\\sadamata-fullstack\\frontend\\src\\generated\\prisma",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "windows",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "C:\\Sadamata\\sadamata-fullstack\\frontend\\prisma\\schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../../.env"
  },
  "relativePath": "../../../prisma",
  "clientVersion": "6.16.2",
  "engineVersion": "1c57fdcd7e44b29b9313256c76699e91c3ac3c43",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "postinstall": false,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "// This is your Prisma schema file,\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\n\n// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?\n// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init\n\ngenerator client {\n  provider = \"prisma-client-js\"\n  output   = \"../src/generated/prisma\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel User {\n  id              String           @id @default(uuid()) // Changed to UUID\n  email           String?          @unique\n  phone           String?          @unique\n  name            String\n  password        String\n  role            Role             @default(USER)\n  createdAt       DateTime         @default(now())\n  updatedAt       DateTime         @updatedAt\n  isActive        Boolean          @default(true)\n  // A user can create many brands (if their role is 'BRAND')\n  brands          Brand[]          @relation(\"UserBrands\") // Add this to complete the relation\n  products        Product[]\n  sales           Sale[]           @relation(\"MerchantSales\")\n  // NEW: one-to-one merchant profile\n  merchantProfile MerchantProfile?\n  addresses       UserAddress[] // NEW\n\n  Order Order[]\n\n  CommissionSetting CommissionSetting[]\n\n  Payout Payout[] @relation(\"MerchantPayouts\")\n}\n\n// model UserAddress {\n//   id        String   @id @default(cuid())\n//   userId    String\n//   user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n//   label     String?        // \"Home\", \"Office\", etc.\n//   firstName  String\n//   lastName  String\n//   phone     String\n//   address  String\n//   address2  String?\n//   city      String\n//   postcode  String\n//   country   String @default(\"Bangladesh\")\n//   isDefault Boolean @default(false)\n\n//   createdAt DateTime @default(now())\n//   updatedAt DateTime @updatedAt\n\n//   @@index([userId, isDefault])\n//   Order Order[]\n// }\n\nmodel UserAddress {\n  id     String @id @default(cuid())\n  userId String\n  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  firstName String\n  lastName  String\n  phone     String\n  email     String? // optional if you prefer to use User.email\n  address   String // full free-form address line\n  isDefault Boolean @default(false)\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n  Order     Order[]\n\n  @@index([userId, isDefault])\n}\n\nmodel MerchantProfile {\n  id     String @id @default(uuid())\n  userId String @unique\n  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  // Personal Information (keep email/phone in User; allow contact overrides if needed)\n  fullName        String   @db.VarChar(120)\n  dateOfBirth     DateTime\n  contactEmail    String   @db.VarChar(190)\n  contactPhone    String   @db.VarChar(32)\n  nidOrPassportNo String   @db.VarChar(64)\n\n  presentAddress   String @db.VarChar(255)\n  permanentAddress String @db.VarChar(255)\n\n  portfolioUrl String? @db.VarChar(255)\n  websiteUrl   String? @db.VarChar(255)\n\n  // Bank (single account from your form; split into its own model later if you need multi-account)\n  bankName      String @db.VarChar(80) // e.g., \"DBBL\"\n  bankBranch    String @db.VarChar(80) // e.g., \"Dhaka\"\n  accountName   String @db.VarChar(120)\n  accountNumber String @db.VarChar(64)\n  routingNumber String @db.VarChar(64)\n\n  // Additional\n  message     String?  @db.Text\n  tiar        Int      @default(10)\n  leftTiar    Int      @default(0)\n  brandOption Boolean  @default(false)\n  createdAt   DateTime @default(now())\n  updatedAt   DateTime @updatedAt\n\n  @@index([bankName, bankBranch])\n}\n\nmodel Brand {\n  id              String        @id @default(uuid()) // Changed to UUID\n  name            String\n  isActive        Boolean       @default(false) // Default is false for new brands\n  createdAt       DateTime      @default(now())\n  updatedAt       DateTime      @updatedAt\n  brandCategory   BrandCategory @relation(fields: [brandCategoryId], references: [id])\n  brandCategoryId String\n  user            User          @relation(\"UserBrands\", fields: [userId], references: [id])\n  userId          String\n  Product         Product[]\n\n  Sales Sale[] @relation(\"BrandSales\")\n\n  // Default commission settings for this brand\n  defaultBrandPct    Float @default(10.0) // brand share\n  defaultMerchantPct Float @default(10.0) // merchant share\n\n  // Personal Information (keep email/phone in User; allow contact overrides if needed)\n\n  dateOfBirth     DateTime\n  contactEmail    String   @db.VarChar(190)\n  contactPhone    String   @db.VarChar(32)\n  nidOrPassportNo String   @db.VarChar(64)\n\n  presentAddress   String @db.VarChar(255)\n  permanentAddress String @db.VarChar(255)\n\n  portfolioUrl String? @db.VarChar(255)\n  websiteUrl   String? @db.VarChar(255)\n\n  // Bank (single account from your form; split into its own model later if you need multi-account)\n  bankName      String @db.VarChar(80) // e.g., \"DBBL\"\n  bankBranch    String @db.VarChar(80) // e.g., \"Dhaka\"\n  accountName   String @db.VarChar(120)\n  accountNumber String @db.VarChar(64)\n  routingNumber String @db.VarChar(64)\n\n  // Additional\n  message String? @db.Text\n\n  industryType  String\n  socialProfile String\n\n  CommissionSetting CommissionSetting[]\n\n  Payout Payout[] @relation(\"BrandPayouts\")\n}\n\nmodel BrandCategory {\n  id        String   @id @default(uuid()) // Changed to UUID\n  name      String\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n  Brand     Brand[] // One-to-many relation with Brand\n}\n\nmodel Product {\n  id          String   @id @default(uuid())\n  productId   String   @unique\n  title       String\n  description String?\n  price       Float\n  createdAt   DateTime @default(now())\n  updatedAt   DateTime @updatedAt\n  isActive    Boolean  @default(false)\n  // Brand handling\n\n  brandName String?\n  brandId   String?\n  Brand     Brand?  @relation(fields: [brandId], references: [id])\n\n  // Relations\n  features Feature[]\n  tags     Tag[]\n  mockupId String\n  Mockup   Mockup           @relation(fields: [mockupId], references: [id])\n  variants ProductVariant[] // <-- each product has multiple variants\n\n  userId String\n  User   User   @relation(fields: [userId], references: [id])\n\n  visibility Boolean @default(true)\n\n  // Design File\n\n  backDesign  String?\n  frontDesign String\n\n  // New: commission % settings\n  brandCommissionPct    Float? // % goes to brand (if Brand attached)\n  merchantCommissionPct Float? // % goes to merchant on each sale\n\n  sales Sale[] // track product sales\n\n  CommissionSetting CommissionSetting[]\n}\n\nmodel Sale {\n  id          String    @id @default(uuid())\n  orderItemId String    @unique\n  orderItem   OrderItem @relation(fields: [orderItemId], references: [id], onDelete: Cascade)\n  productId   String\n  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)\n\n  merchantId String\n  merchant   User   @relation(\"MerchantSales\", fields: [merchantId], references: [id])\n\n  brandId String? // null if product had no brand\n  brand   Brand?  @relation(\"BrandSales\", fields: [brandId], references: [id])\n\n  quantity Int   @default(1)\n  total    Float // total sale amount\n\n  // Earnings\n  brandEarning    Float      @default(0)\n  merchantEarning Float      @default(0)\n  platformEarning Float      @default(0)\n  createdAt       DateTime   @default(now())\n  SaleItem        SaleItem[]\n\n  @@index([productId, createdAt]) // speeds up time-window queries\n}\n\nmodel SaleItem {\n  id        String  @id @default(uuid())\n  saleId    String\n  productId String\n  quantity  Int\n  unitPrice Decimal\n  total     Decimal\n\n  // add this:\n  orderItemId String @unique\n\n  Sale Sale @relation(fields: [saleId], references: [id])\n}\n\nmodel ProductVariant {\n  id        String  @id @default(uuid())\n  productId String\n  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)\n\n  color   String  @db.VarChar(24) // e.g. \"black\", \"green\"\n  fitType FitType // e.g. MEN, WOMEN, YOUTH\n\n  frontImg String // required: front image\n  backImg  String? // optional: back image\n\n  // images ProductImage[] // <-- store multiple variant-specific images\n\n  @@unique([productId, color, fitType]) // <- change this\n}\n\nmodel Feature {\n  id        String @id @default(uuid())\n  productId String\n  content   String\n\n  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)\n}\n\nmodel Tag {\n  id        String @id @default(uuid())\n  productId String\n  value     String\n\n  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)\n}\n\nmodel Mockup {\n  id        String          @id @default(uuid())\n  name      String\n  variants  MockupVariant[] // one row per (color, fitType)\n  createdAt DateTime        @default(now())\n  updatedAt DateTime        @updatedAt\n  Product   Product[]\n}\n\nmodel MockupVariant {\n  id       String @id @default(uuid())\n  mockupId String\n  mockup   Mockup @relation(fields: [mockupId], references: [id], onDelete: Cascade)\n\n  color   String  @db.VarChar(24) // e.g. \"black\", \"green\"\n  fitType FitType // e.g. MEN, WOMEN, YOUTH\n\n  frontImg String // required: front image\n  backImg  String // optional: back image\n\n  @@unique([mockupId, color, fitType]) // one row per (mockup, color, fitType)\n}\n\nmodel Order {\n  id String @id @default(cuid())\n\n  // required: no guest orders\n  userId String\n  user   User   @relation(fields: [userId], references: [id])\n\n  // required: always point to a saved address\n  addressId String\n  address   UserAddress @relation(fields: [addressId], references: [id])\n  // (default referential action prevents deleting an address that’s used)\n\n  // money\n  currency    String  @default(\"BDT\")\n  subtotal    Decimal @db.Decimal(12, 2)\n  discount    Decimal @default(0) @db.Decimal(12, 2)\n  tax         Decimal @default(0) @db.Decimal(12, 2)\n  shippingFee Decimal @default(0) @db.Decimal(12, 2)\n  grandTotal  Decimal @db.Decimal(12, 2)\n\n  // coupon\n  couponCode String?\n  couponRate Decimal? @db.Decimal(5, 4)\n\n  // payment / gateway\n  status String @default(\"PENDING\") // PENDING | PAID | FAILED | CANCELLED\n  tranId String @unique\n\n  // relations\n  items   OrderItem[]\n  payment Payment?\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  settledAt DateTime?\n\n  @@index([userId, createdAt])\n  @@index([addressId])\n}\n\nmodel OrderItem {\n  id      String @id @default(cuid())\n  orderId String\n  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)\n\n  productId    String?\n  productTitle String\n  unitPrice    Decimal @db.Decimal(12, 2)\n  quantity     Int     @default(1)\n\n  color   String?\n  fitType FitType?\n  size    String?\n\n  Sale Sale[]\n}\n\nmodel Payment {\n  id         String   @id @default(cuid())\n  orderId    String   @unique\n  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)\n  valId      String? // from SSLCOMMERZ validation / redirect/IPN\n  bankTranId String? // bank_tran_id\n  cardType   String?\n  rawPayload Json? // store last payload (success/ipn)\n  createdAt  DateTime @default(now())\n  updatedAt  DateTime @updatedAt\n}\n\nmodel CommissionSetting {\n  id String @id @default(uuid())\n\n  // Optional foreign keys to associate commissions with specific Brand or Merchant\n  brandId String?\n  brand   Brand?  @relation(fields: [brandId], references: [id], onDelete: Cascade)\n\n  merchantId String?\n  merchant   User?   @relation(fields: [merchantId], references: [id], onDelete: Cascade)\n\n  // Commission percentages\n  brandCommissionPct    Float @default(10.0) // default brand share in %\n  merchantCommissionPct Float @default(10.0) // default merchant share in %\n\n  // Apply globally or to specific products if needed\n  productId String?\n  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)\n\n  // For versioning or tracking\n  effectiveFrom DateTime  @default(now())\n  effectiveTo   DateTime?\n  isActive      Boolean   @default(true)\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@index([brandId, merchantId, productId])\n}\n\nenum PayoutActor {\n  BRAND\n  MERCHANT\n}\n\nmodel Payout {\n  id         String      @id @default(uuid())\n  actor      PayoutActor\n  brandId    String?\n  merchantId String?\n\n  amount    Decimal  @db.Decimal(12, 2)\n  note      String?\n  createdAt DateTime @default(now())\n\n  // named relations + SetNull keeps payout records if brand/user gets removed\n  brand    Brand? @relation(\"BrandPayouts\", fields: [brandId], references: [id], onDelete: SetNull)\n  merchant User?  @relation(\"MerchantPayouts\", fields: [merchantId], references: [id], onDelete: SetNull)\n\n  @@index([actor, brandId, merchantId, createdAt])\n}\n\nenum FitType {\n  MEN\n  WOMEN\n  YOUTH\n}\n\nenum Role {\n  USER\n  ADMIN\n  BRAND // Added the BRAND role\n  MERCH\n}\n\nenum Visibility {\n  SEARCHABLE\n  NON_SEARCHABLE\n}\n\nenum ImageType {\n  FRONT\n  BACK\n}\n",
  "inlineSchemaHash": "82d7c3b9a93102813bc5cb360251195f9750f137e97fcf468319e570f90613d8",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"User\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"phone\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"password\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"role\",\"kind\":\"enum\",\"type\":\"Role\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"brands\",\"kind\":\"object\",\"type\":\"Brand\",\"relationName\":\"UserBrands\"},{\"name\":\"products\",\"kind\":\"object\",\"type\":\"Product\",\"relationName\":\"ProductToUser\"},{\"name\":\"sales\",\"kind\":\"object\",\"type\":\"Sale\",\"relationName\":\"MerchantSales\"},{\"name\":\"merchantProfile\",\"kind\":\"object\",\"type\":\"MerchantProfile\",\"relationName\":\"MerchantProfileToUser\"},{\"name\":\"addresses\",\"kind\":\"object\",\"type\":\"UserAddress\",\"relationName\":\"UserToUserAddress\"},{\"name\":\"Order\",\"kind\":\"object\",\"type\":\"Order\",\"relationName\":\"OrderToUser\"},{\"name\":\"CommissionSetting\",\"kind\":\"object\",\"type\":\"CommissionSetting\",\"relationName\":\"CommissionSettingToUser\"},{\"name\":\"Payout\",\"kind\":\"object\",\"type\":\"Payout\",\"relationName\":\"MerchantPayouts\"}],\"dbName\":null},\"UserAddress\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"UserToUserAddress\"},{\"name\":\"firstName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"lastName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"phone\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"address\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isDefault\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"Order\",\"kind\":\"object\",\"type\":\"Order\",\"relationName\":\"OrderToUserAddress\"}],\"dbName\":null},\"MerchantProfile\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"MerchantProfileToUser\"},{\"name\":\"fullName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"dateOfBirth\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"contactEmail\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"contactPhone\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"nidOrPassportNo\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"presentAddress\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"permanentAddress\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"portfolioUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"websiteUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"bankName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"bankBranch\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"accountName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"accountNumber\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"routingNumber\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"message\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"tiar\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"leftTiar\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"brandOption\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Brand\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"brandCategory\",\"kind\":\"object\",\"type\":\"BrandCategory\",\"relationName\":\"BrandToBrandCategory\"},{\"name\":\"brandCategoryId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"UserBrands\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"Product\",\"kind\":\"object\",\"type\":\"Product\",\"relationName\":\"BrandToProduct\"},{\"name\":\"Sales\",\"kind\":\"object\",\"type\":\"Sale\",\"relationName\":\"BrandSales\"},{\"name\":\"defaultBrandPct\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"defaultMerchantPct\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"dateOfBirth\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"contactEmail\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"contactPhone\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"nidOrPassportNo\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"presentAddress\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"permanentAddress\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"portfolioUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"websiteUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"bankName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"bankBranch\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"accountName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"accountNumber\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"routingNumber\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"message\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"industryType\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"socialProfile\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"CommissionSetting\",\"kind\":\"object\",\"type\":\"CommissionSetting\",\"relationName\":\"BrandToCommissionSetting\"},{\"name\":\"Payout\",\"kind\":\"object\",\"type\":\"Payout\",\"relationName\":\"BrandPayouts\"}],\"dbName\":null},\"BrandCategory\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"Brand\",\"kind\":\"object\",\"type\":\"Brand\",\"relationName\":\"BrandToBrandCategory\"}],\"dbName\":null},\"Product\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"productId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"price\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"brandName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"brandId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"Brand\",\"kind\":\"object\",\"type\":\"Brand\",\"relationName\":\"BrandToProduct\"},{\"name\":\"features\",\"kind\":\"object\",\"type\":\"Feature\",\"relationName\":\"FeatureToProduct\"},{\"name\":\"tags\",\"kind\":\"object\",\"type\":\"Tag\",\"relationName\":\"ProductToTag\"},{\"name\":\"mockupId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"Mockup\",\"kind\":\"object\",\"type\":\"Mockup\",\"relationName\":\"MockupToProduct\"},{\"name\":\"variants\",\"kind\":\"object\",\"type\":\"ProductVariant\",\"relationName\":\"ProductToProductVariant\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"User\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ProductToUser\"},{\"name\":\"visibility\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"backDesign\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"frontDesign\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"brandCommissionPct\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"merchantCommissionPct\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"sales\",\"kind\":\"object\",\"type\":\"Sale\",\"relationName\":\"ProductToSale\"},{\"name\":\"CommissionSetting\",\"kind\":\"object\",\"type\":\"CommissionSetting\",\"relationName\":\"CommissionSettingToProduct\"}],\"dbName\":null},\"Sale\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"orderItemId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"orderItem\",\"kind\":\"object\",\"type\":\"OrderItem\",\"relationName\":\"OrderItemToSale\"},{\"name\":\"productId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"product\",\"kind\":\"object\",\"type\":\"Product\",\"relationName\":\"ProductToSale\"},{\"name\":\"merchantId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"merchant\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"MerchantSales\"},{\"name\":\"brandId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"brand\",\"kind\":\"object\",\"type\":\"Brand\",\"relationName\":\"BrandSales\"},{\"name\":\"quantity\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"total\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"brandEarning\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"merchantEarning\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"platformEarning\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"SaleItem\",\"kind\":\"object\",\"type\":\"SaleItem\",\"relationName\":\"SaleToSaleItem\"}],\"dbName\":null},\"SaleItem\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"saleId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"productId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"quantity\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"unitPrice\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"total\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"orderItemId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"Sale\",\"kind\":\"object\",\"type\":\"Sale\",\"relationName\":\"SaleToSaleItem\"}],\"dbName\":null},\"ProductVariant\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"productId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"product\",\"kind\":\"object\",\"type\":\"Product\",\"relationName\":\"ProductToProductVariant\"},{\"name\":\"color\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"fitType\",\"kind\":\"enum\",\"type\":\"FitType\"},{\"name\":\"frontImg\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"backImg\",\"kind\":\"scalar\",\"type\":\"String\"}],\"dbName\":null},\"Feature\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"productId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"content\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"product\",\"kind\":\"object\",\"type\":\"Product\",\"relationName\":\"FeatureToProduct\"}],\"dbName\":null},\"Tag\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"productId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"value\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"product\",\"kind\":\"object\",\"type\":\"Product\",\"relationName\":\"ProductToTag\"}],\"dbName\":null},\"Mockup\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"variants\",\"kind\":\"object\",\"type\":\"MockupVariant\",\"relationName\":\"MockupToMockupVariant\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"Product\",\"kind\":\"object\",\"type\":\"Product\",\"relationName\":\"MockupToProduct\"}],\"dbName\":null},\"MockupVariant\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"mockupId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"mockup\",\"kind\":\"object\",\"type\":\"Mockup\",\"relationName\":\"MockupToMockupVariant\"},{\"name\":\"color\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"fitType\",\"kind\":\"enum\",\"type\":\"FitType\"},{\"name\":\"frontImg\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"backImg\",\"kind\":\"scalar\",\"type\":\"String\"}],\"dbName\":null},\"Order\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"OrderToUser\"},{\"name\":\"addressId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"address\",\"kind\":\"object\",\"type\":\"UserAddress\",\"relationName\":\"OrderToUserAddress\"},{\"name\":\"currency\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"subtotal\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"discount\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"tax\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"shippingFee\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"grandTotal\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"couponCode\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"couponRate\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"status\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"tranId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"items\",\"kind\":\"object\",\"type\":\"OrderItem\",\"relationName\":\"OrderToOrderItem\"},{\"name\":\"payment\",\"kind\":\"object\",\"type\":\"Payment\",\"relationName\":\"OrderToPayment\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"settledAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"OrderItem\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"orderId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"order\",\"kind\":\"object\",\"type\":\"Order\",\"relationName\":\"OrderToOrderItem\"},{\"name\":\"productId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"productTitle\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"unitPrice\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"quantity\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"color\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"fitType\",\"kind\":\"enum\",\"type\":\"FitType\"},{\"name\":\"size\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"Sale\",\"kind\":\"object\",\"type\":\"Sale\",\"relationName\":\"OrderItemToSale\"}],\"dbName\":null},\"Payment\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"orderId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"order\",\"kind\":\"object\",\"type\":\"Order\",\"relationName\":\"OrderToPayment\"},{\"name\":\"valId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"bankTranId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"cardType\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"rawPayload\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"CommissionSetting\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"brandId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"brand\",\"kind\":\"object\",\"type\":\"Brand\",\"relationName\":\"BrandToCommissionSetting\"},{\"name\":\"merchantId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"merchant\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"CommissionSettingToUser\"},{\"name\":\"brandCommissionPct\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"merchantCommissionPct\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"productId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"product\",\"kind\":\"object\",\"type\":\"Product\",\"relationName\":\"CommissionSettingToProduct\"},{\"name\":\"effectiveFrom\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"effectiveTo\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Payout\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"actor\",\"kind\":\"enum\",\"type\":\"PayoutActor\"},{\"name\":\"brandId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"merchantId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"amount\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"note\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"brand\",\"kind\":\"object\",\"type\":\"Brand\",\"relationName\":\"BrandPayouts\"},{\"name\":\"merchant\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"MerchantPayouts\"}],\"dbName\":null}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

