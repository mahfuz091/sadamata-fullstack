// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid()) // Changed to UUID
  email     String?  @unique
  phone     String?  @unique
  name      String
  password  String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // A user can create many brands (if their role is 'BRAND')
  brands Brand[] @relation("UserBrands") // Add this to complete the relation
}

model Brand {
  id              String        @id @default(uuid()) // Changed to UUID
  name            String
  isActive        Boolean       @default(false) // Default is false for new brands
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  brandCategory   BrandCategory @relation(fields: [brandCategoryId], references: [id])
  brandCategoryId String

  subBrands SubBrand[]

  user   User   @relation("UserBrands", fields: [userId], references: [id])
  userId String
}

model BrandCategory {
  id        String   @id @default(uuid()) // Changed to UUID
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Brand Brand[] // One-to-many relation with Brand
}

model SubBrand {
  id        String   @id @default(uuid()) // Changed to UUID
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // SubBrand belongs to a Brand
  brandId String
  brand   Brand  @relation(fields: [brandId], references: [id])
}

enum Role {
  USER
  ADMIN
  BRAND // Added the BRAND role
  MERCH
}
