// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid()) // Changed to UUID
  email     String?  @unique
  phone     String?  @unique
  name      String
  password  String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isActive  Boolean  @default(true)
  // A user can create many brands (if their role is 'BRAND')
  brands    Brand[]  @relation("UserBrands") // Add this to complete the relation
}

model Brand {
  id              String        @id @default(uuid()) // Changed to UUID
  name            String
  isActive        Boolean       @default(false) // Default is false for new brands
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  brandCategory   BrandCategory @relation(fields: [brandCategoryId], references: [id])
  brandCategoryId String
  user            User          @relation("UserBrands", fields: [userId], references: [id])
  userId          String
  Product         Product[]
}

model BrandCategory {
  id        String   @id @default(uuid()) // Changed to UUID
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Brand     Brand[] // One-to-many relation with Brand
}

model Product {
  id          String   @id @default(uuid()) // Changed to UUID
  title       String
  description String?
  designFront String[]
  designBack  String[]
  feature     String[]
  price       Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  tags        String[]
  // Product belongs to a Brand
  BrandName   String?
  BrandId     String?
  Brand       Brand?   @relation(fields: [BrandId], references: [id])
  MockupId    String
  Mockup      Mockup   @relation(fields: [MockupId], references: [id])
}

model Mockup {
  id        String          @id @default(uuid()) // Changed to UUID
  name      String
  variants  MockupVariant[] // one row per color
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  Product   Product[]
}

model MockupVariant {
  id       String  @id @default(uuid())
  mockupId String
  mockup   Mockup  @relation(fields: [mockupId], references: [id], onDelete: Cascade)
  color    String  @db.VarChar(24) // e.g. "black", "green"
  frontImg String // single image per color (front)
  backImg  String? // optional: single back image

  @@unique([mockupId, color]) // one row per (mockup, color)
}

enum Role {
  USER
  ADMIN
  BRAND // Added the BRAND role
  MERCH
}
